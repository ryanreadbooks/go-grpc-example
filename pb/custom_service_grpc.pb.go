// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: custom_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomServiceClient is the client API for CustomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomServiceClient interface {
	// 测试metadata的使用
	MetadataCarryTest(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error)
	// 测试server-side unary interceptor
	CallWithUnaryInterceptor(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	CallWithUnaryInterceptor2(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 测试server-side stream interceptor
	CallWithStreamInterceptor(ctx context.Context, opts ...grpc.CallOption) (CustomService_CallWithStreamInterceptorClient, error)
}

type customServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomServiceClient(cc grpc.ClientConnInterface) CustomServiceClient {
	return &customServiceClient{cc}
}

func (c *customServiceClient) MetadataCarryTest(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomService/MetadataCarryTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) CallWithUnaryInterceptor(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomService/CallWithUnaryInterceptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) CallWithUnaryInterceptor2(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/pb.CustomService/CallWithUnaryInterceptor2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) CallWithStreamInterceptor(ctx context.Context, opts ...grpc.CallOption) (CustomService_CallWithStreamInterceptorClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomService_ServiceDesc.Streams[0], "/pb.CustomService/CallWithStreamInterceptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &customServiceCallWithStreamInterceptorClient{stream}
	return x, nil
}

type CustomService_CallWithStreamInterceptorClient interface {
	Send(*SimpleRequest) error
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type customServiceCallWithStreamInterceptorClient struct {
	grpc.ClientStream
}

func (x *customServiceCallWithStreamInterceptorClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customServiceCallWithStreamInterceptorClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomServiceServer is the server API for CustomService service.
// All implementations must embed UnimplementedCustomServiceServer
// for forward compatibility
type CustomServiceServer interface {
	// 测试metadata的使用
	MetadataCarryTest(context.Context, *CustomRequest) (*CustomResponse, error)
	// 测试server-side unary interceptor
	CallWithUnaryInterceptor(context.Context, *SimpleRequest) (*SimpleResponse, error)
	CallWithUnaryInterceptor2(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// 测试server-side stream interceptor
	CallWithStreamInterceptor(CustomService_CallWithStreamInterceptorServer) error
	mustEmbedUnimplementedCustomServiceServer()
}

// UnimplementedCustomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomServiceServer struct {
}

func (UnimplementedCustomServiceServer) MetadataCarryTest(context.Context, *CustomRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataCarryTest not implemented")
}
func (UnimplementedCustomServiceServer) CallWithUnaryInterceptor(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWithUnaryInterceptor not implemented")
}
func (UnimplementedCustomServiceServer) CallWithUnaryInterceptor2(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWithUnaryInterceptor2 not implemented")
}
func (UnimplementedCustomServiceServer) CallWithStreamInterceptor(CustomService_CallWithStreamInterceptorServer) error {
	return status.Errorf(codes.Unimplemented, "method CallWithStreamInterceptor not implemented")
}
func (UnimplementedCustomServiceServer) mustEmbedUnimplementedCustomServiceServer() {}

// UnsafeCustomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomServiceServer will
// result in compilation errors.
type UnsafeCustomServiceServer interface {
	mustEmbedUnimplementedCustomServiceServer()
}

func RegisterCustomServiceServer(s grpc.ServiceRegistrar, srv CustomServiceServer) {
	s.RegisterService(&CustomService_ServiceDesc, srv)
}

func _CustomService_MetadataCarryTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).MetadataCarryTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomService/MetadataCarryTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).MetadataCarryTest(ctx, req.(*CustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_CallWithUnaryInterceptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).CallWithUnaryInterceptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomService/CallWithUnaryInterceptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).CallWithUnaryInterceptor(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_CallWithUnaryInterceptor2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).CallWithUnaryInterceptor2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CustomService/CallWithUnaryInterceptor2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).CallWithUnaryInterceptor2(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_CallWithStreamInterceptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomServiceServer).CallWithStreamInterceptor(&customServiceCallWithStreamInterceptorServer{stream})
}

type CustomService_CallWithStreamInterceptorServer interface {
	Send(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type customServiceCallWithStreamInterceptorServer struct {
	grpc.ServerStream
}

func (x *customServiceCallWithStreamInterceptorServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customServiceCallWithStreamInterceptorServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomService_ServiceDesc is the grpc.ServiceDesc for CustomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CustomService",
	HandlerType: (*CustomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MetadataCarryTest",
			Handler:    _CustomService_MetadataCarryTest_Handler,
		},
		{
			MethodName: "CallWithUnaryInterceptor",
			Handler:    _CustomService_CallWithUnaryInterceptor_Handler,
		},
		{
			MethodName: "CallWithUnaryInterceptor2",
			Handler:    _CustomService_CallWithUnaryInterceptor2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallWithStreamInterceptor",
			Handler:       _CustomService_CallWithStreamInterceptor_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "custom_service.proto",
}
